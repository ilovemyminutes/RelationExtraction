diff --git a/train.py b/train.py
index f837df3..11c9166 100644
--- a/train.py
+++ b/train.py
@@ -265,7 +265,7 @@ def validate(model, model_type, valid_loader, criterion):
 
 
 if __name__ == "__main__":
-    TIMESTAMP = get_timestamp()  # used as an identifier
+    TIMESTAMP = get_timestamp()  # used as an identifier in model save phase
     LOAD_STATE_DICT = None
 
     parser = argparse.ArgumentParser()
@@ -280,7 +280,7 @@ if __name__ == "__main__":
     parser.add_argument("--preprocess-type", type=str, default=PreProcessType.ES)
     parser.add_argument("--epochs", type=int, default=Config.Epochs)
     parser.add_argument("--valid-size", type=int, default=Config.ValidSize)
-    parser.add_argument("--train-batch-size", type=int, default=Config.Batch8)
+    parser.add_argument("--train-batch-size", type=int, default=Config.Batch16)
     parser.add_argument("--valid-batch-size", type=int, default=512)
     parser.add_argument("--optim-type", type=str, default=Optimizer.Adam)
     parser.add_argument("--loss-type", type=str, default=Loss.CE)
diff --git a/train_boostcamp.py b/train_boostcamp.py
deleted file mode 100644
index 760defc..0000000
--- a/train_boostcamp.py
+++ /dev/null
@@ -1,91 +0,0 @@
-import pickle as pickle
-import os
-import pandas as pd
-import torch
-from sklearn.metrics import accuracy_score
-from transformers import (
-    AutoTokenizer,
-    BertForSequenceClassification,
-    Trainer,
-    TrainingArguments,
-    BertConfig,
-)
-from load_data import *
-
-# 평가를 위한 metrics function.
-def compute_metrics(pred):
-    labels = pred.label_ids
-    preds = pred.predictions.argmax(-1)
-    # calculate accuracy using sklearn's function
-    acc = accuracy_score(labels, preds)
-    return {
-        "accuracy": acc,
-    }
-
-
-def train():
-    # load model and tokenizer
-    MODEL_NAME = "bert-base-multilingual-cased"
-    tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
-
-    # load dataset
-    train_dataset = load_data("/opt/ml/input/data/train/train.tsv")
-    # dev_dataset = load_data("./dataset/train/dev.tsv")
-    train_label = train_dataset["label"].values
-    # dev_label = dev_dataset['label'].values
-
-    # tokenizing dataset
-    tokenized_train = tokenized_dataset(train_dataset, tokenizer)
-    # tokenized_dev = tokenized_dataset(dev_dataset, tokenizer)
-
-    # make dataset for pytorch.
-    RE_train_dataset = RE_Dataset(tokenized_train, train_label)
-    # RE_dev_dataset = RE_Dataset(tokenized_dev, dev_label)
-
-    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
-
-    # setting model hyperparameter
-    bert_config = BertConfig.from_pretrained(MODEL_NAME)
-    bert_config.num_labels = 42
-    model = BertForSequenceClassification(bert_config)
-    model.parameters
-    model.to(device)
-
-    # 사용한 option 외에도 다양한 option들이 있습니다.
-    # https://huggingface.co/transformers/main_classes/trainer.html#trainingarguments 참고해주세요.
-    training_args = TrainingArguments(
-        output_dir="./results",  # output directory
-        save_total_limit=3,  # number of total save model.
-        save_steps=500,  # model saving step.
-        num_train_epochs=4,  # total number of training epochs
-        learning_rate=5e-5,  # learning_rate
-        per_device_train_batch_size=16,  # batch size per device during training
-        # per_device_eval_batch_size=16,   # batch size for evaluation
-        warmup_steps=500,  # number of warmup steps for learning rate scheduler
-        weight_decay=0.01,  # strength of weight decay
-        logging_dir="./logs",  # directory for storing logs
-        logging_steps=100,  # log saving step.
-        # evaluation_strategy='steps', # evaluation strategy to adopt during training
-        # `no`: No evaluation during training.
-        # `steps`: Evaluate every `eval_steps`.
-        # `epoch`: Evaluate every end of epoch.
-        # eval_steps = 500,            # evaluation step.
-    )
-    trainer = Trainer(
-        model=model,  # the instantiated 🤗 Transformers model to be trained
-        args=training_args,  # training arguments, defined above
-        train_dataset=RE_train_dataset,  # training dataset
-        # eval_dataset=RE_dev_dataset,             # evaluation dataset
-        # compute_metrics=compute_metrics         # define metrics function
-    )
-
-    # train model
-    trainer.train()
-
-
-def main():
-    train()
-
-
-if __name__ == "__main__":
-    main()
diff --git a/wandb/latest-run b/wandb/latest-run
index 178711f..d3ac3e0 120000
--- a/wandb/latest-run
+++ b/wandb/latest-run
@@ -1 +1 @@
-run-20210418_102228-1jagit0t
\ No newline at end of file
+run-20210418_111349-5xe2aknr
\ No newline at end of file
